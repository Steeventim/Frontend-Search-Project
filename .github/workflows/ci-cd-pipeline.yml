name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Cloner le dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2: Configurer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Mise à jour vers une version récente (ajustez si nécessaire)
          cache: "npm" # Cache les dépendances pour accélérer les builds

      # Étape 3: Installer les dépendances
      - name: Install dependencies
        run: npm ci # Plus rapide et déterministe que npm install

      # Étape 4: Vérifier TypeScript
      - name: Check TypeScript
        run: npm run typecheck # Ajoutez "typecheck": "tsc --noEmit" dans package.json si absent
        continue-on-error: true # Continue même en cas d'erreurs mineures

      # Étape 5: Vérifier ESLint
      - name: Run ESLint
        run: npm run lint # Ajoutez "lint": "eslint src" dans package.json si absent
        continue-on-error: true # Continue pour permettre des corrections manuelles

      # Étape 6: Lancer les tests
      - name: Run tests
        run: npm test
        continue-on-error: true # Continue si les tests ne sont pas critiques

      # Étape 7: Construire l'application
      - name: Build the application
        run: npm run build
        env:
          CI: true # Force les vérifications strictes pour React

      # Étape 8: Configurer SSH pour le déploiement
      - name: Set up SSH
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Déploiement uniquement sur push main
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      # Étape 9: Déployer sur le serveur
      - name: Deploy to production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.PROJECT_PATH }} && \
             git pull origin main && \
             npm ci && \
             npm run build && \
             pm2 restart all" # Exemple avec PM2, ajustez selon votre serveur
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}

      # Étape 10: Notifier via Slack
      - name: Notify deployment status
        if: always() # S'exécute même en cas d'échec
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: "your-channel-id" # Remplacez par l'ID du canal Slack
          text: |
            *CI/CD Pipeline*: ${{ job.status }}
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Event: ${{ github.event_name }}
            Details: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View in GitHub Actions>
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
